name: Build and Check Links

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      # Use the general-purpose upload-artifact action
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to be downloaded in the next job
          name: jekyll-site
          # Path to the directory to upload
          path: ./_site

  # Link checker job
  link-checker:
    runs-on: ubuntu-latest
    needs: build # This job runs only after the build job is successful
    steps:
      # Use the general-purpose download-artifact action
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          # Must match the name given in the upload-artifact step
          name: jekyll-site

      - name: Create .lycheeignore file
        run: |
          echo "https://www.bhmdiocese.org" >> .lycheeignore
          echo "http://eepurl.com/h-czoP" >> .lycheeignore # Ignore the MailChimp Link
      - name: Link Checker
        uses: lycheeverse/lychee-action@v1.10.0
        with:
          args: "--base . --verbose './**/*.html' './*.html'"
          token: ${{secrets.GITHUB_TOKEN}}
          fail: true
          format: markdown

  visual-regression-tests:
    runs-on: ubuntu-latest
    needs: build

    # All steps will run inside this Playwright container
    container:
      image: mcr.microsoft.com/playwright:v1.55.0

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: jekyll-site
          path: ./_site

      - name: Build custom nginx server image
        # This builds the image using the Dockerfile from our previous attempt
        run: docker build -t custom-nginx ./.github/nginx

      - name: Start custom nginx server
        # This runs our new image in the background
        run: |
          docker run -d --name web-server --network host \
            -v "$(pwd)/_site":/usr/share/nginx/html \
            custom-nginx

      - name: Wait for server to be ready
        # This step prevents tests from running before the server is fully started
        run: |
          echo "Waiting for server to start..."
          timeout=20
          while ! curl -s --head http://localhost:80 | grep "200 OK" > /dev/null; do
            if [ $timeout -le 0 ]; then
              echo "Timeout waiting for server."
              exit 1
            fi
            sleep 1
            timeout=$((timeout-1))
          done
          echo "Server is up!"

      - name: Install dependencies
        run: npm install

      - name: Run Playwright tests
        run: npx playwright test
        env:
          # Since the server and test runner share the host network, we use localhost
          PLAYWRIGHT_BASE_URL: http://localhost:80
          HOME: /root

      - name: Upload snapshots on failure
        if: failure() # This step now runs only when tests fail
        uses: actions/upload-artifact@v4
        with:
          name: snapshots-diff
          path: tests/visual.spec.js-snapshots

      - name: Upload Playwright report
        if: always() # This step always runs to provide a report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30